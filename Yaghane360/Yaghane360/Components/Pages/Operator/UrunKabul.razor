@page "/urunKabul"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin, FabrikaSahibi")]
@using Yaghane360.Data.Kullanici
@inject ZeytinTakipDBContext dbContext

<h3>Boş Box’lara Müşteri Atama</h3>

@if (bosBoxlar == null)
{
    <p>Yükleniyor...</p>
}
else
{
    <div class="mb-3 d-flex align-items-end">
        <div class="me-2">
            <label>Boş Box Seç:</label>
            <select class="form-select" @bind="seciliBoxId">
                <option value="">-- Seçiniz --</option>
                @foreach (var box in bosBoxlar)
                {
                    <option value="@box.BoxID">@box.BoxID</option>
                }
            </select>
        </div>

        <div>
            <label>Miktar Girin</label>
            <InputNumber class="form-control" @bind-Value="gelenMiktar" TValue="decimal"
                         Culture="System.Globalization.CultureInfo.InvariantCulture" />
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col-6">
            <label>Müşteri İsim Soyisim Ara:</label>
            <InputText class="form-control" @bind-Value="arananMusteriIsım" />
            @*Mudbuton ekle*@
            <button class="btn btn-secondary mt-1" @onclick="Filtrele">Müşteri Getir</button>
        </div>

        <div class="mb-3 col-6">
            <label>Müşteri ID ile Ara:</label>
            <InputNumber class="form-control" @bind-Value="arananMusteriID" />
            <button class="btn btn-secondary mt-1" @onclick="MusteriAra">Müşteri Getir</button>
        </div>
    </div>


    @if (seciliMusteri != null)
    {
        <div class="d-flex flex-wrap gap-2">
            @foreach(var s in seciliMusteri)
            {
                <div class="card p-3" style="min-width: 250px;">
                <p>👤 <strong>@s.Isim @s.Soyisim</strong></p>
                    <p><strong>@s.MusteriID &emsp; &emsp; &emsp; &emsp; @s.Bolge</strong></p>
                <button class="btn btn-success" @onclick="() => BoxaMusteriAta(s)">Box’a Ata</button>
                </div>
            }
        </div>
    }
    else if(musteriBulunamadi)
    {
        <p class="text-danger">Müşteri bulunamadı.</p>
    }
}

@code {
    private List<Box> bosBoxlar;
    private string bilgiMesaji;
    private int? seciliBoxId;
    private int? arananMusteriID;
    private string arananMusteriIsım;
    private decimal gelenMiktar;
    private List<Musteri> seciliMusteri;
    private bool musteriBulunamadi = false;

    protected override async Task OnInitializedAsync()
    {

        bosBoxlar = dbContext.Boxlar
            .Where(b => b.Miktar == 0).ToList();
    }

    private async Task MusteriAra()
    {
        seciliMusteri = new List<Musteri>();
        if (arananMusteriID.HasValue)
        {
            var musteri = dbContext.Musteriler
                .FirstOrDefault(m => m.MusteriID == arananMusteriID.Value);

            if (musteri != null)
            { 
                seciliMusteri.Add(musteri);
                musteriBulunamadi = false;
            }
            else
            {
                musteriBulunamadi = true;
            }
        }
        //seciliMusteri.Clear();
    }
    private void Filtrele()
    {
        seciliMusteri = new List<Musteri>();
        if (!string.IsNullOrWhiteSpace(arananMusteriIsım))
        {
            var metin = arananMusteriIsım.ToLower();

            seciliMusteri = dbContext.Musteriler
                .Where(m =>
                    (!string.IsNullOrEmpty(m.Isim) && m.Isim.ToLower().Contains(metin)) ||
                    (!string.IsNullOrEmpty(m.Soyisim) && m.Soyisim.ToLower().Contains(metin))
                )
                .ToList();
            musteriBulunamadi = seciliMusteri.Count == 0;
        }
    }
    private async Task BoxaMusteriAta(Musteri musteri)
    {
        if (seciliBoxId.HasValue != null)
        {
            if (musteri != null)
            {
                var box = await dbContext.Boxlar.FindAsync(seciliBoxId.Value);
                if (box != null)
                {
                    // Müşteri bilgilerini güncelle
                    musteri.Borc = musteri.Borc + (gelenMiktar * 6m);
                    musteri.StokZeytin = musteri.StokZeytin + gelenMiktar;
                    if (musteri.ZeytinHacim == null)
                        musteri.ZeytinHacim = 0;

                    musteri.ZeytinHacim = musteri.ZeytinHacim + gelenMiktar;

                    // Box bilgilerini güncelle
                    box.Miktar = gelenMiktar;
                    box.MusteriID = musteri.MusteriID;

                    // Yeni işlem oluştur
                    var yeniUrun = new Urun
                    {
                        // IslemNo burada boş bırakılır! Otomatik artar
                            MusteriID = musteri.MusteriID,
                            ZeytinKg = gelenMiktar,
                            TarihGirdi = DateTime.Now,
                            BoxID = box.BoxID,
                            IslemDurum = false 
                    };

                    // Urun kaydını ekle
                    dbContext.Urunler.Add(yeniUrun);
                    dbContext.Boxlar.Update(box);
                    // Değişiklikleri kaydet
                    await dbContext.SaveChangesAsync();

                    // Ekranı temizle
                    bosBoxlar.Remove(box);
                    seciliBoxId = null;
                    seciliMusteri = null;
                    gelenMiktar = 0;
                    arananMusteriID = null;

                }
                else 
                { 
                bilgiMesaji = "❌Başarısız İşlem: Lütfen Geçerli Bir Box Seçiniz 📦";
                }
            }
            else 
            { 
                bilgiMesaji = "❌Başarısız İşlem: Lütfen Bir Müşteri Seçiniz "; 
            }
        }
        else
        {
            bilgiMesaji = "❌Başarısız İşlem: Lütfen Bir Box Seçiniz 📦";
        }
    }
}
